name: CI - Run Tests with Docker

on:
  push:
    branches:
      - desenvolvimento   # Rodar quando houver um push na branch 'main'
  pull_request:
    branches:
      - desenvolvimento   # Rodar para pull requests na branch 'main'

jobs:
  # Job para testar o backend (FastAPI) e frontend (React/Vite) usando Docker
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: meubanco
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 1234
        ports:
          - 5433:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      # Passo 1: Checkout do código
      - name: Checkout code
        uses: actions/checkout@v2

      # Passo 2: Set up Docker (se necessário)
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      # Passo 3: Instalar Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verifica a versão do Docker Compose instalado

      # Passo 3: Construir e rodar os containers com Docker Compose
      - name: Run Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d  # Inicia os containers em background
          docker-compose ps  # Verifica se os containers estão rodando corretamente

      # Passo 4: Rodar os testes do backend (FastAPI)
      - name: Run backend tests (FastAPI)
        run: |
          docker-compose exec backend pytest backend/tests/  # Executa os testes do backend dentro do container

      # Passo 5: Rodar os testes do frontend (React/Vite)
      - name: Run frontend tests (React/Vite)
        run: |
          docker-compose exec frontend npm test -- --coverage  # Executa os testes do frontend dentro do container

      # Passo 6: Parar os containers após os testes
      - name: Shut down Docker containers
        run: |
          docker-compose down  # Desliga os containers após a execução dos testes

  # Job para deploy (somente na branch 'main')
  deploy:
    if: github.ref == 'refs/heads/main'  # Só executa o deploy quando a branch for 'main'
    runs-on: ubuntu-latest
    needs: test  # Garante que o deploy só aconteça se os testes passarem

    steps:
      # Passo 1: Aprovação manual antes do deploy
      - name: Request approval before deploying
        uses: peter-evans/manual-approval-action@v1
        with:
          approval_required: true  # Aprovação manual antes do deploy

      # Passo 2: Deploy para o servidor
      - name: Deploy to Server
        run: |
          curl -X POST "https://seu-servidor.com/deploy?key=${{ secrets.DEPLOY_API_KEY }}"
        env:
          DEPLOY_API_KEY: ${{ secrets.DEPLOY_API_KEY }}  # Adicione sua chave de API no GitHub Secrets
